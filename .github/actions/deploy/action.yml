name: "Auto Deploy"
description: "Execution of the deploy by calling the service and monitoring the logs"
inputs:
  GH_TOKEN:
    description: "GitHub token to clone secrets repository"
    required: true
  GH_USER:
    description: "GitHub user owner of the repository"
    default: "thiagosol"
  DEPLOY_URL:
    description: "Deploy service URL"
    default: "http://deploy.thiagosol.com/deploy"
  LOG_URL:
    description: "Deploy logs URL"
    default: "https://deploy.thiagosol.com/logs"
runs:
  using: "composite"
  steps:
    - name: Clone secrets repository
      run: |
        git clone https://oauth2:${{ inputs.GH_TOKEN }}@github.com/thiagosol/secrets.git
        mv secrets/secrets.json secrets.json
      shell: bash

    - name: Read secrets from JSON file
      id: secrets
      run: |
        echo "SECRETS_ENV_VARS=[]" >> $GITHUB_ENV
        for key in $(jq -r 'keys_unsorted[]' secrets.json); do
          value=$(jq -r --arg key "$key" '.[$key]' secrets.json)
          echo "::add-mask::$value" 
          echo "$key=$value" >> $GITHUB_ENV
          echo "SECRETS_ENV_VARS+=(\"$key=$value\")" >> $GITHUB_ENV
        done
      shell: bash

    - name: Call Deploy API
      run: |
        AUTH="${DEPLOY_USER}:${DEPLOY_PASS}"
        echo "::add-mask::$AUTH"

        JSON_ENV_VARS=$(printf '%s\n' "${SECRETS_ENV_VARS[@]}" | jq -R . | jq -s .)

        RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X POST "${{ inputs.DEPLOY_URL }}" \
          -u "$AUTH" \
          -H "Content-Type: application/json" \
          -d '{
            "service": "${{ github.event.repository.name }}",
            "branch": "${{ inputs.GH_USER }}",
            "env_vars": '"$JSON_ENV_VARS"'
          }')

        if [ "$RESPONSE" -ne 200 ]; then
          echo "‚ùå Error calling the deploy API! HTTP code: $RESPONSE"
          echo "‚Ñπ Deploy API response:"
          cat response.json
          exit 1
        fi

        echo "üöÄ Deploy started for ${{ github.event.repository.name }}!"
      shell: bash

    - name: Wait for Deploy Completion (Max. 30 Minutes)
      run: |
        LOG_URL="${{ inputs.LOG_URL }}/${{ github.event.repository.name }}"
        AUTH="${DEPLOY_USER}:${DEPLOY_PASS}"
        echo "::add-mask::$AUTH" 

        echo "üü° Monitoring logs in: $LOG_URL"
        echo "‚è≥ Waiting up to 30 minutes for the deploy..."

        START_TIME=$(date +%s)
        TIMEOUT=$((30 * 60)) 
        LAST_LOG=""
        LAST_UPDATE_TIME=$(date +%s) 

        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED=$((CURRENT_TIME - START_TIME))
          NO_UPDATE_ELAPSED=$((CURRENT_TIME - LAST_UPDATE_TIME))

          if [ $ELAPSED -gt $TIMEOUT ]; then
            echo "‚ùå Timeout of 30 minutes reached. Cancelling deploy..."
            exit 1
          fi

          LOGS=$(curl -u "$AUTH" -s "$LOG_URL")

          if echo "$LOGS" | grep -qE "Deploy finalizado!|Deploy sem docker finalizado!"; then
            echo "‚úÖ Deploy completed successfully!"
            exit 0
          fi

          if [ -n "$LAST_LOG" ]; then
            NEW_LOGS=$(diff <(echo "$LAST_LOG") <(echo "$LOGS") | grep "^>" | cut -c3- || true)
          else
            NEW_LOGS="$LOGS"
          fi

          if [ -n "$NEW_LOGS" ]; then
            echo "$NEW_LOGS"
            LAST_LOG="$LOGS"
            LAST_UPDATE_TIME=$(date +%s) 
          fi

          if [ $NO_UPDATE_ELAPSED -gt 600 ]; then
            echo "‚ùå No new lines in the log in 10 minutes. Deploy blocked."
            exit 1
          fi

          sleep 10
        done

      shell: bash
